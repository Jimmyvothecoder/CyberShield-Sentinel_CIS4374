"use client"

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Icons } from '@/components/ui/icons'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { MalwareScanner } from '@/components/malware-scanner/malware-scanner'

interface MalwareScanResult {
  safe: boolean
  threatName?: string
  threatLevel?: 'low' | 'medium' | 'high' | 'critical'
  signatures?: string[]
  behaviors?: string[]
  recommendations?: string[]
}

export default function MalwareScanPage() {
  const router = useRouter()
  const [file, setFile] = useState<File | null>(null)
  const [scanning, setScanning] = useState(false)
  const [result, setResult] = useState<MalwareScanResult | null>(null)

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
    }
  }

  const handleScan = async () => {
    if (!file) return

    setScanning(true)
    setResult(null)

    try {
      // Simulate API call with realistic data
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Generate random threat data
      const isSafe = Math.random() > 0.3
      const threatLevel: 'low' | 'medium' | 'high' | 'critical' | undefined = !isSafe ? ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] : undefined
      
      const resultData: MalwareScanResult = {
        safe: isSafe,
        threatName: !isSafe ? `Malware.${Math.random().toString(36).substring(2)}` : undefined,
        threatLevel,
        signatures: !isSafe ? [
          'Trojan.Generic',
          'Virus.Win32',
          'Downloader.Generic'
        ].slice(0, Math.floor(Math.random() * 3)) : [],
        behaviors: !isSafe ? [
          'Attempts to download additional malware',
          'Modifies system registry',
          'Creates hidden processes',
          'Contains suspicious macros'
        ].slice(0, Math.floor(Math.random() * 4)) : [],
        recommendations: !isSafe ? [
          'Immediately disconnect from network',
          'Do not execute this file',
          'Run full system scan',
          'Contact IT support immediately'
        ].slice(0, Math.floor(Math.random() * 4)) : [
          'File is clean and safe to use',
          'No threats detected'
        ]
      }

      setResult(resultData)
    } catch (error) {
      console.error('Error scanning file:', error)
      setResult({
        safe: false,
        threatName: 'Error scanning file',
        threatLevel: 'critical' as const,
        signatures: [],
        behaviors: [],
        recommendations: ['Contact IT support immediately']
      })
    } finally {
      setScanning(false)
    }
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Malware Scanner</h1>
        <Button variant="outline" onClick={() => router.push('/dashboard')}>
          Back to Dashboard
        </Button>
      </div>

      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icons.upload className="h-5 w-5" />
              Scan File
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="file">Select a file to scan</Label>
                <Input
                  id="file"
                  type="file"
                  onChange={handleFileUpload}
                  accept="*/*"
                />
              </div>
              <Button
                onClick={handleScan}
                disabled={!file || scanning}
                className="w-full"
              >
                {scanning ? (
                  <>
                    <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  'Scan File'
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {result && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icons.shield className="h-5 w-5" />
                Scan Results
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-center">
                  <Badge
                    variant={
                      result.safe ? 'secondary' :
                      result.threatLevel === 'critical' ? 'destructive' :
                      result.threatLevel === 'high' ? 'warning' :
                      'outline'
                    }
                    className="w-full justify-center text-base py-2"
                  >
                    {result.safe ? 'File is clean and safe to use' : `Threat detected: ${result.threatName}`}
                  </Badge>
                </div>

                {!result.safe && result.signatures && (
                  <div>
                    <h3 className="text-sm font-medium">Detected Signatures</h3>
                    <ul className="space-y-1 text-sm text-muted-foreground">
                      {result.signatures.map((sig, index) => (
                        <li key={index}>
                          <Badge variant="outline">{sig}</Badge>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {!result.safe && result.behaviors && (
                  <div>
                    <h3 className="text-sm font-medium">Suspicious Behaviors</h3>
                    <ul className="space-y-1 text-sm text-muted-foreground">
                      {result.behaviors.map((behavior, index) => (
                        <li key={index}>{behavior}</li>
                      ))}
                    </ul>
                  </div>
                )}

                <div>
                  <h3 className="text-sm font-medium">Recommended Actions</h3>
                  <ul className="space-y-1 text-sm text-muted-foreground">
                    {(result.recommendations || []).map((rec, index) => (
                      <li key={index}>
                        <Badge variant="outline">{rec}</Badge>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        <MalwareScanner />
      </div>
    </div>
  )
}
