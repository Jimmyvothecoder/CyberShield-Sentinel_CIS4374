"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Icons } from '@/components/ui/icons'
import { Badge } from '@/components/ui/badge'
import { cn } from '@/lib/utils'

interface MalwareScanResult {
  id: string
  fileName: string
  fileType: string
  fileSize: string
  scanDate: string
  threatLevel: 'low' | 'medium' | 'high' | 'critical'
  threatsFound: number
  scanStatus: 'clean' | 'infected' | 'suspicious' | 'scanning'
  details: {
    signatures: string[]
    behaviors: string[]
    recommendations: string[]
  }
}

const mockScanResults: MalwareScanResult[] = [
  {
    id: '1',
    fileName: 'document.pdf',
    fileType: 'PDF Document',
    fileSize: '1.2 MB',
    scanDate: new Date().toISOString(),
    threatLevel: 'low',
    threatsFound: 0,
    scanStatus: 'clean',
    details: {
      signatures: [],
      behaviors: [],
      recommendations: ['File is clean and safe to use. No threats detected.'],
    }
  },
  {
    id: '2',
    fileName: 'system_update.exe',
    fileType: 'Executable',
    fileSize: '4.5 MB',
    scanDate: new Date().toISOString(),
    threatLevel: 'critical',
    threatsFound: 3,
    scanStatus: 'infected',
    details: {
      signatures: [
        'Trojan.Downloader.Win32.Agent',
        'Backdoor.Win32.Trojan',
        'Downloader.Generic.2345'
      ],
      behaviors: [
        'Attempts to download additional malware',
        'Modifies system registry',
        'Creates hidden processes'
      ],
      recommendations: [
        'Immediately disconnect from network',
        'Do not execute this file',
        'Run full system scan',
        'Contact IT support immediately'
      ]
    }
  },
  {
    id: '3',
    fileName: 'archive.zip',
    fileType: 'Compressed Archive',
    fileSize: '2.8 MB',
    scanDate: new Date().toISOString(),
    threatLevel: 'medium',
    threatsFound: 1,
    scanStatus: 'suspicious',
    details: {
      signatures: ['Macro.Virus.Office'],
      behaviors: ['Contains suspicious macros', 'Attempts to access network'],
      recommendations: [
        'Do not extract archive',
        'Scan with updated virus definitions',
        'Verify source of file'
      ]
    }
  },
  {
    id: '4',
    fileName: 'report.docx',
    fileType: 'Word Document',
    fileSize: '850 KB',
    scanDate: new Date().toISOString(),
    threatLevel: 'low',
    threatsFound: 0,
    scanStatus: 'clean',
    details: {
      signatures: [],
      behaviors: [],
      recommendations: ['File is clean and safe to use. No threats detected.'],
    }
  }
]

export function MalwareScanner() {
  const [scanResults, setScanResults] = useState(mockScanResults)
  const [isScanning, setIsScanning] = useState(false)
  const [selectedFile, setSelectedFile] = useState<string | null>(null)

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setIsScanning(true)
    setSelectedFile(file.name)

    // Simulate scan process
    setTimeout(() => {
      const newScanResult: MalwareScanResult = {
        id: crypto.randomUUID(),
        fileName: file.name,
        fileType: file.type.split('/')[1],
        fileSize: `${(file.size / 1024 / 1024).toFixed(1)} MB`,
        scanDate: new Date().toISOString(),
        threatLevel: 'low',
        threatsFound: 0,
        scanStatus: 'clean',
        details: {
          signatures: [],
          behaviors: [],
          recommendations: ['File is clean and safe to use. No threats detected.'],
        }
      }

      // Randomly make some files suspicious
      if (Math.random() < 0.3) {
        newScanResult.threatLevel = ['medium', 'high', 'critical'][Math.floor(Math.random() * 3)]
        newScanResult.threatsFound = Math.floor(Math.random() * 5) + 1
        newScanResult.scanStatus = ['suspicious', 'infected'][Math.floor(Math.random() * 2)]
        
        // Add random signatures and behaviors
        newScanResult.details.signatures = [
          'Trojan.Generic',
          'Macro.Virus',
          'Downloader.Generic'
        ].slice(0, Math.floor(Math.random() * 3) + 1)

        newScanResult.details.behaviors = [
          'Attempts to download additional malware',
          'Modifies system registry',
          'Creates hidden processes',
          'Contains suspicious macros'
        ].slice(0, Math.floor(Math.random() * 3) + 1)

        newScanResult.details.recommendations = [
          'Immediately disconnect from network',
          'Do not execute this file',
          'Run full system scan',
          'Contact IT support immediately'
        ].slice(0, Math.floor(Math.random() * 3) + 1)
      }

      setScanResults(prev => [newScanResult, ...prev])
      setIsScanning(false)
      setSelectedFile(null)
    }, 3000) // Simulate 3 second scan time
  }

  return (
    <Card className="w-full max-w-3xl">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icons.shield className="h-5 w-5" />
            Malware Scanner
          </CardTitle>
          <Badge variant="outline">
            Real-time Protection
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* File Upload Section */}
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Badge variant="secondary">Status</Badge>
            <span className="text-sm text-muted-foreground">Ready to scan</span>
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" className="flex-1">
              <Icons.upload className="h-4 w-4 mr-2" />
              Choose File
              <input
                type="file"
                className="hidden"
                onChange={handleFileUpload}
                accept="*"
              />
            </Button>
            {selectedFile && (
              <div className="flex-1 text-sm text-muted-foreground">
                Selected file: {selectedFile}
              </div>
            )}
          </div>
        </div>

        {/* Scan Results */}
        <div className="space-y-4">
          <h3 className="text-sm font-medium">Scan Results</h3>
          <div className="space-y-4">
            {isScanning && (
              <div className="flex items-center gap-3 p-4 bg-muted/50 rounded-md">
                <Icons.loading className="h-4 w-4 animate-spin" />
                <span className="text-sm">Scanning file...</span>
              </div>
            )}
            {scanResults.map((result) => (
              <div
                key={result.id}
                className={cn(
                  'flex items-center gap-3 p-4 rounded-md',
                  {
                    'bg-destructive/10': result.scanStatus === 'infected',
                    'bg-warning/10': result.scanStatus === 'suspicious',
                    'bg-success/10': result.scanStatus === 'clean'
                  }
                )}
              >
                <div className="flex items-center gap-2">
                  <Icons.file className="h-5 w-5" />
                  <div className="flex-1">
                    <h4 className="font-medium">{result.fileName}</h4>
                    <p className="text-sm text-muted-foreground">
                      {result.fileSize} â€¢ {result.fileType}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    variant={
                      result.scanStatus === 'infected' ? 'destructive' :
                      result.scanStatus === 'suspicious' ? 'warning' :
                      'secondary'
                    }
                  >
                    {result.scanStatus.charAt(0).toUpperCase() + result.scanStatus.slice(1)}
                  </Badge>
                  <Badge variant={
                    result.threatLevel === 'critical' ? 'destructive' :
                    result.threatLevel === 'high' ? 'warning' :
                    result.threatLevel === 'medium' ? 'secondary' :
                    'outline'
                  }>
                    {result.threatLevel.charAt(0).toUpperCase() + result.threatLevel.slice(1)}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Detailed Threat Information */}
        <div className="space-y-4">
          <h3 className="text-sm font-medium">Detailed Threat Information</h3>
          <div className="space-y-4">
            {scanResults
              .filter(result => result.threatsFound > 0)
              .map((result) => (
                <div key={result.id} className="p-4 bg-muted/50 rounded-md">
                  <h4 className="text-sm font-medium mb-2">{result.fileName}</h4>
                  <div className="space-y-3">
                    {result.details.signatures.length > 0 && (
                      <div>
                        <h5 className="font-medium text-xs mb-1">Signatures Detected</h5>
                        <ul className="space-y-1 text-sm">
                          {result.details.signatures.map((sig, index) => (
                            <li key={index} className="text-muted-foreground">
                              {sig}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {result.details.behaviors.length > 0 && (
                      <div>
                        <h5 className="font-medium text-xs mb-1">Suspicious Behaviors</h5>
                        <ul className="space-y-1 text-sm">
                          {result.details.behaviors.map((behavior, index) => (
                            <li key={index} className="text-muted-foreground">
                              {behavior}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {result.details.recommendations.length > 0 && (
                      <div>
                        <h5 className="font-medium text-xs mb-1">Recommended Actions</h5>
                        <ul className="space-y-1 text-sm">
                          {result.details.recommendations.map((rec, index) => (
                            <li key={index} className="text-muted-foreground">
                              {rec}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              ))}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
