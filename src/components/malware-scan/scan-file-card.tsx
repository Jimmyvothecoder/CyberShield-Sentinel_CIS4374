'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { useToast } from '@/components/ui/use-toast'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Database } from '@/types/supabase'
import { Upload, Shield, AlertTriangle, CheckCircle } from 'lucide-react'

type ScanStatus = 'idle' | 'uploading' | 'scanning' | 'completed' | 'failed'

export default function ScanFileCard() {
  const [status, setStatus] = useState<ScanStatus>('idle')
  const [progress, setProgress] = useState(0)
  const [scanResult, setScanResult] = useState<{
    isClean: boolean
    threats: string[]
    scanTime: number
    scanId: string
    fileUrl: string | null
  } | null>(null)
  
  const { toast } = useToast()
  const supabase = createClientComponentClient<Database>()

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    try {
      setStatus('uploading')
      setProgress(0)

      const formData = new FormData()
      formData.append('file', file)

      const response = await fetch('/api/malware-scan', {
        method: 'POST',
        body: formData
      })

      if (!response.ok) {
        throw new Error('Scan failed')
      }

      const result = await response.json()
      
      if (result.error) {
        throw new Error(result.error)
      }

      setStatus('completed')
      setScanResult(result)

      toast({
        title: result.isClean ? 'File is clean!' : 'Threats detected!',
        description: result.isClean 
          ? `Scan completed in ${(result.scanTime / 1000).toFixed(2)}s`
          : `Found ${result.threats.length} threat(s)`,
        variant: result.isClean ? 'default' : 'destructive'
      })

      // Subscribe to scan status updates
      const scanChannel = supabase.channel(`scan:${result.scanId}`)
      scanChannel
        .on('postgres_changes', { 
          event: 'UPDATE',
          schema: 'public',
          table: 'scan_results',
          filter: `id=eq.${result.scanId}`
        }, (payload) => {
          console.log('Scan status updated:', payload.new)
          // Handle status updates
        })
        .subscribe()

    } catch (error) {
      setStatus('failed')
      toast({
        title: 'Scan failed',
        description: error instanceof Error ? error.message : 'An error occurred',
        variant: 'destructive'
      })
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Malware Scan</CardTitle>
        <CardDescription>
          Upload files to scan for malware and other threats
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex items-center justify-center w-full">
            <label
              htmlFor="file-upload"
              className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600"
            >
              <div className="flex flex-col items-center justify-center pt-5 pb-6">
                <Upload className="w-8 h-8 mb-3 text-gray-400" />
                <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                  <span className="font-semibold">Click to upload</span> or drag and drop
                </p>
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  Any file type supported
                </p>
              </div>
              <input
                id="file-upload"
                type="file"
                className="hidden"
                onChange={handleFileChange}
                disabled={status === 'uploading' || status === 'scanning'}
              />
            </label>
          </div>

          {(status === 'uploading' || status === 'scanning') && (
            <div className="space-y-2">
              <Progress value={progress} />
              <p className="text-sm text-gray-500 text-center">
                {status === 'uploading' ? 'Uploading file...' : 'Scanning for threats...'}
              </p>
            </div>
          )}

          {status === 'completed' && scanResult && (
            <div className={`p-4 rounded-lg ${
              scanResult.isClean ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20'
            }`}>
              <div className="flex items-center space-x-2">
                {scanResult.isClean ? (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                ) : (
                  <AlertTriangle className="w-5 h-5 text-red-500" />
                )}
                <h3 className={`font-medium ${
                  scanResult.isClean ? 'text-green-700 dark:text-green-200' : 'text-red-700 dark:text-red-200'
                }`}>
                  {scanResult.isClean ? 'File is clean' : 'Threats detected'}
                </h3>
              </div>
              
              <div className="mt-2 text-sm space-y-1">
                <p>Scan time: {(scanResult.scanTime / 1000).toFixed(2)}s</p>
                {!scanResult.isClean && scanResult.threats.length > 0 && (
                  <div>
                    <p className="font-medium">Detected threats:</p>
                    <ul className="list-disc list-inside">
                      {scanResult.threats.map((threat, i) => (
                        <li key={i} className="text-red-600 dark:text-red-400">{threat}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {scanResult.isClean && scanResult.fileUrl && (
                <Button
                  variant="outline"
                  size="sm"
                  className="mt-4"
                  onClick={() => scanResult.fileUrl && window.open(scanResult.fileUrl, '_blank')}
                >
                  Download File
                </Button>
              )}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}
