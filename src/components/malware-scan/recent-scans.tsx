'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Database } from '@/types/supabase'
import { Shield, AlertTriangle, CheckCircle, Clock } from 'lucide-react'

type ScanResult = Database['public']['Tables']['scan_results']['Row']

export default function RecentScans() {
  const [scans, setScans] = useState<ScanResult[]>([])
  const [loading, setLoading] = useState(true)
  const supabase = createClientComponentClient<Database>()

  useEffect(() => {
    const fetchScans = async () => {
      const { data: recentScans, error } = await supabase
        .from('scan_results')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(5)

      if (error) {
        console.error('Error fetching scans:', error)
      } else {
        setScans(recentScans)
      }
      setLoading(false)
    }

    fetchScans()

    // Subscribe to scan updates
    const channel = supabase
      .channel('scan_results')
      .on('postgres_changes', { 
        event: '*',
        schema: 'public',
        table: 'scan_results'
      }, (payload) => {
        if (payload.eventType === 'INSERT') {
          setScans(prev => [payload.new as ScanResult, ...prev.slice(0, 4)])
        } else if (payload.eventType === 'UPDATE') {
          setScans(prev => 
            prev.map(scan => 
              scan.id === payload.new.id ? payload.new as ScanResult : scan
            )
          )
        }
      })
      .subscribe()

    return () => {
      channel.unsubscribe()
    }
  }, [supabase])

  const formatDate = (date: string) => {
    return new Date(date).toLocaleString()
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Scans</CardTitle>
        <CardDescription>
          Latest malware scan results
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {loading ? (
            <div className="text-center text-gray-500">Loading...</div>
          ) : scans.length === 0 ? (
            <div className="text-center text-gray-500">No scans yet</div>
          ) : (
            scans.map((scan) => (
              <div
                key={scan.id}
                className="flex items-start space-x-4 p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
              >
                <div className="flex-shrink-0">
                  {scan.scan_status === 'completed' ? (
                    scan.is_clean ? (
                      <CheckCircle className="w-5 h-5 text-green-500" />
                    ) : (
                      <AlertTriangle className="w-5 h-5 text-red-500" />
                    )
                  ) : scan.scan_status === 'scanning' ? (
                    <Clock className="w-5 h-5 text-blue-500 animate-spin" />
                  ) : scan.scan_status === 'failed' ? (
                    <AlertTriangle className="w-5 h-5 text-red-500" />
                  ) : (
                    <Shield className="w-5 h-5 text-gray-500" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    {scan.file_name}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {formatDate(scan.created_at)}
                  </p>
                  {scan.scan_status === 'completed' && (
                    <div className="mt-1">
                      {scan.is_clean ? (
                        <span className="text-xs text-green-600 dark:text-green-400">
                          Clean • {(scan.scan_time / 1000).toFixed(2)}s
                        </span>
                      ) : (
                        <span className="text-xs text-red-600 dark:text-red-400">
                          {scan.threats_found?.length} threat(s) found • {(scan.scan_time / 1000).toFixed(2)}s
                        </span>
                      )}
                    </div>
                  )}
                  {scan.scan_status === 'scanning' && (
                    <span className="text-xs text-blue-600 dark:text-blue-400">
                      Scanning in progress...
                    </span>
                  )}
                  {scan.scan_status === 'failed' && (
                    <span className="text-xs text-red-600 dark:text-red-400">
                      Scan failed
                    </span>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
      </CardContent>
    </Card>
  )
}
